
Paddel = Class{}

--#######################################################################################################
--  init function begin

-- declaring x , y , height , width for paddel
-- declaring speed for y ( dy )
--#######################################################################################################

function Paddel : init ( x , y , width , height)

	self.x = x
	self.y = y
	self.width = width
	self.height = height
	self.dy =0
end

--#######################################################################################################
--  init function  end
--#######################################################################################################



--#######################################################################################################
--  update function begin

--  updating  y position of paddel
--#######################################################################################################

function Paddel : update ( dt )

	if self.dy < 0 then

		 self.y = math.max ( 0 , self.y + self.dy * dt )

	else
	
		self.y = math.min ( VIRTUAL_HEIGHT - self.height , self.y + self.dy * dt )
	
	end
	
end

--#######################################################################################################
--  update function end
--#######################################################################################################




--#######################################################################################################
--  render function begin

--  displays paddel 
--#######################################################################################################

function Paddel : render ()

	love.graphics.rectangle ( 'fill' , self.x , self.y , self.width , self.height )
	
end
 --#######################################################################################################
--  render function  end
--#######################################################################################################
